import android.media.MediaCodec
import android.media.MediaExtractor
import android.media.MediaFormat
import android.media.MediaMuxer
import android.os.Environment
import java.io.File
import java.io.FileOutputStream
import java.nio.ByteBuffer

fun convertAacToWav(inputFilePath: String, outputFilePath: String) {
    val mediaExtractor = MediaExtractor()
    mediaExtractor.setDataSource(inputFilePath)

    val audioTrackIndex = findAudioTrackIndex(mediaExtractor)

    val inputFormat = mediaExtractor.getTrackFormat(audioTrackIndex)
    val outputFormat = createWavFormat(inputFormat)

    val mediaCodec = MediaCodec.createDecoderByType(inputFormat.getString(MediaFormat.KEY_MIME))
    mediaCodec.configure(inputFormat, null, null, 0)
    mediaCodec.start()

    val outputFile = File(Environment.getExternalStorageDirectory(), outputFilePath)
    val outputStream = FileOutputStream(outputFile)
    val mediaMuxer = MediaMuxer(outputFile.absolutePath, MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4)

    mediaMuxer.addTrack(outputFormat)
    mediaMuxer.start()

    val inputBuffers = mediaCodec.inputBuffers
    val outputBuffers = mediaCodec.outputBuffers
    val bufferInfo = MediaCodec.BufferInfo()

    var isEOS = false
    var presentationTimeUs: Long = 0

    while (!isEOS) {
        val inputIndex = mediaCodec.dequeueInputBuffer(10000)
        if (inputIndex >= 0) {
            val inputBuffer = inputBuffers[inputIndex]
            val sampleSize = mediaExtractor.readSampleData(inputBuffer, 0)
            if (sampleSize < 0) {
                mediaCodec.queueInputBuffer(inputIndex, 0, 0, 0, MediaCodec.BUFFER_FLAG_END_OF_STREAM)
                isEOS = true
            } else {
                presentationTimeUs = mediaExtractor.sampleTime
                mediaCodec.queueInputBuffer(inputIndex, 0, sampleSize, presentationTimeUs, 0)
                mediaExtractor.advance()
            }
        }

        val outputIndex = mediaCodec.dequeueOutputBuffer(bufferInfo, 10000)
        if (outputIndex >= 0) {
            val outputBuffer = outputBuffers[outputIndex]
            val chunkSize = bufferInfo.size + 44
            val wavBuffer = ByteBuffer.allocate(chunkSize)

            writeWavHeader(wavBuffer, bufferInfo.size.toLong(), outputFormat)

            outputBuffer.position(bufferInfo.offset)
            outputBuffer.limit(bufferInfo.offset + bufferInfo.size)
            wavBuffer.position(44)

            wavBuffer.put(outputBuffer)

            mediaMuxer.writeSampleData(0, wavBuffer, bufferInfo)

            mediaCodec.releaseOutputBuffer(outputIndex, false)
        }

        if (bufferInfo.flags and MediaCodec.BUFFER_FLAG_END_OF_STREAM != 0) {
            isEOS = true
        }
    }

    mediaCodec.stop()
    mediaCodec.release()

    mediaExtractor.release()
    mediaMuxer.stop()
    mediaMuxer.release()

    outputStream.close()
}

private fun findAudioTrackIndex(mediaExtractor: MediaExtractor): Int {
    val numTracks = mediaExtractor.trackCount
    for (i in 0 until numTracks) {
        val format = mediaExtractor.getTrackFormat(i)
        val mime = format.getString(MediaFormat.KEY_MIME)
        if (mime?.startsWith("audio/") == true) {
            return i
        }
    }
    return -1
}

private fun createWavFormat(inputFormat: MediaFormat): MediaFormat {
    val outputFormat = MediaFormat.createAudioFormat(MediaFormat.MIMETYPE_AUDIO_RAW, inputFormat.getInteger(MediaFormat.KEY_SAMPLE_RATE), inputFormat.getInteger(MediaFormat.KEY_CHANNEL_COUNT))
    outputFormat.setInteger(MediaFormat.KEY_BIT_RATE, 16)
    outputFormat.setInteger(MediaFormat.KEY_PCM_ENCODING, 2)
    return outputFormat
}

private fun writeWavHeader(buffer: ByteBuffer, audioDataSize: Long, format: MediaFormat) {
    buffer.put("RIFF".toByteArray()) // ChunkID
    buffer.putInt((audioDataSize + 36).toInt()) // ChunkSize
    buffer.put("WAVE".toByteArray()) // Format

    buffer.put("fmt ".toByteArray()) // Subchunk1ID
    buffer.putInt(16) // Subchunk1Size
    buffer.putShort(1) // AudioFormat (PCM = 1)
    buffer.putShort(format.getInteger(MediaFormat.KEY_CHANNEL_COUNT).toShort()) // NumChannels
    buffer.putInt(format.getInteger(MediaFormat.KEY_SAMPLE_RATE)) // SampleRate
    buffer.putInt(format.getInteger(MediaFormat.KEY_SAMPLE_RATE) * format.getInteger(MediaFormat.KEY_CHANNEL_COUNT) * 2) // ByteRate
    buffer.putShort((format.getInteger(MediaFormat.KEY_CHANNEL_COUNT) * 2).toShort()) // BlockAlign
    buffer.putShort(16) // BitsPerSample

    buffer.put("data".toByteArray()) // Subchunk2ID
    buffer.putInt(audioDataSize.toInt()) // Subchunk2Size
}

fun main() {
    val inputFilePath = "path/to/input.aac"
    val outputFilePath = "path/to/output.wav"
    convertAacToWav(inputFilePath, outputFilePath)
}
