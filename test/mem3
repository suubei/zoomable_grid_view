import android.media.MediaCodec
import android.media.MediaExtractor
import android.media.MediaFormat
import android.media.AudioFormat
import android.media.AudioRecord
import android.media.AudioTrack
import android.media.AudioAttributes
import android.media.AudioManager
import java.io.*

class AudioConverter {

  class AudioConverter {
    // ...

    fun convertMP4ALATMtoWAV(mp4aFilePath: String, wavFilePath: String) {
        val mp4aFile = File(mp4aFilePath)
        val wavFile = File(wavFilePath)

        try {
            val mediaExtractor = MediaExtractor()
            mediaExtractor.setDataSource(mp4aFile.path)

            val audioTrackIndex = selectAudioTrack(mediaExtractor)

            mediaExtractor.selectTrack(audioTrackIndex)
            val mediaFormat = mediaExtractor.getTrackFormat(audioTrackIndex)

            val mp4aMimeType = mediaFormat.getString(MediaFormat.KEY_MIME)
            val channelCount = mediaFormat.getInteger(MediaFormat.KEY_CHANNEL_COUNT)
            val sampleRate = mediaFormat.getInteger(MediaFormat.KEY_SAMPLE_RATE)

            val mediaCodec = MediaCodec.createDecoderByType(mp4aMimeType)
            mediaCodec.configure(mediaFormat, null, null, 0)
            mediaCodec.start()

            val bufferSize = AudioRecord.getMinBufferSize(
                sampleRate,
                AudioFormat.CHANNEL_OUT_STEREO,
                AudioFormat.ENCODING_PCM_16BIT
            )
            val audioData = ByteArray(bufferSize)

            val outputStream = DataOutputStream(FileOutputStream(wavFile))

            var bytesRead = 0
            var totalBytesWritten = 0L

            // Read and convert the audio data
            while (true) {
                val inputBufferIndex = mediaCodec.dequeueInputBuffer(10000)
                if (inputBufferIndex >= 0) {
                    val inputBuffer = mediaCodec.getInputBuffer(inputBufferIndex)!!
                    bytesRead = mediaExtractor.readSampleData(inputBuffer, 0)

                    if (bytesRead >= 0) {
                        val presentationTimeUs = mediaExtractor.sampleTime
                        mediaCodec.queueInputBuffer(
                            inputBufferIndex,
                            0,
                            bytesRead,
                            presentationTimeUs,
                            if (bytesRead < 0) MediaCodec.BUFFER_FLAG_END_OF_STREAM else 0
                        )
                        mediaExtractor.advance()
                    } else {
                        mediaCodec.queueInputBuffer(
                            inputBufferIndex,
                            0,
                            0,
                            0,
                            MediaCodec.BUFFER_FLAG_END_OF_STREAM
                        )
                    }
                }

                val bufferInfo = MediaCodec.BufferInfo()
                val outputBufferIndex = mediaCodec.dequeueOutputBuffer(bufferInfo, 10000)
                if (outputBufferIndex >= 0) {
                    val outputBuffer = mediaCodec.getOutputBuffer(outputBufferIndex)!!

                    // Write the audio data to the WAV file
                    val audioDataSize = bufferInfo.size
                    outputStream.write(outputBuffer, bufferInfo.offset, audioDataSize)

                    totalBytesWritten += audioDataSize

                    mediaCodec.releaseOutputBuffer(outputBufferIndex, false)

                    if ((bufferInfo.flags and MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {
                        break
                    }
                }
            }

            // Write the WAV header with the correct audio data size
            writeWavHeader(outputStream, totalBytesWritten, sampleRate, channelCount, AudioFormat.ENCODING_PCM_16BIT)

            mediaCodec.stop()
            mediaCodec.release()
            mediaExtractor.release()
            outputStream.close()
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    // ...
}

           
           
           
           
           
private fun writeWavHeader(
    outputStream: DataOutputStream,
    audioDataSize: Long,
    sampleRate: Int,
    channelCount: Int,
    audioFormat: Int
) {
    val totalAudioLen = audioDataSize + 36
    val byteRate = sampleRate * channelCount * (audioFormat / 8)

    // Write WAV header
    outputStream.writeBytes("RIFF")
    outputStream.write(intToByteArray(totalAudioLen.toInt()), 0, 4)
    outputStream.writeBytes("WAVE")
    outputStream.writeBytes("fmt ")
    outputStream.write(intToByteArray(16), 0, 4) // Sub-chunk 1 size (16 for PCM)
    outputStream.write(shortToByteArray(1), 0, 2) // Audio format (1 for PCM)
    outputStream.write(shortToByteArray(channelCount.toShort()), 0, 2) // Number of channels
    outputStream.write(intToByteArray(sampleRate), 0, 4) // Sample rate
    outputStream.write(intToByteArray(byteRate), 0, 4) // Byte rate
    outputStream.write(shortToByteArray((channelCount * audioFormat / 8).toShort()), 0, 2) // Block align
    outputStream.write(shortToByteArray(audioFormat.toShort()), 0, 2) // Bits per sample
    outputStream.writeBytes("data")
    outputStream.write(intToByteArray(audioDataSize.toInt()), 0, 4) // Sub-chunk 2 size
}
           
