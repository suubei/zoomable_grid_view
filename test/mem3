class AudioConverter {
    // ...

    fun convertAACtoWAV(aacFilePath: String, wavFilePath: String): Boolean {
        val aacFile = File(aacFilePath)
        val wavFile = File(wavFilePath)

        try {
            val mediaExtractor = MediaExtractor()
            mediaExtractor.setDataSource(aacFile.path)

            val audioTrackIndex = selectAudioTrack(mediaExtractor)

            mediaExtractor.selectTrack(audioTrackIndex)
            val mediaFormat = mediaExtractor.getTrackFormat(audioTrackIndex)

            val mimeType = mediaFormat.getString(MediaFormat.KEY_MIME)
            val channelCount = mediaFormat.getInteger(MediaFormat.KEY_CHANNEL_COUNT)
            val sampleRate = mediaFormat.getInteger(MediaFormat.KEY_SAMPLE_RATE)

            val mediaCodec = MediaCodec.createDecoderByType(mimeType)
            mediaCodec.configure(mediaFormat, null, null, 0)
            mediaCodec.start()

            val outputStream = DataOutputStream(FileOutputStream(wavFile))

            var totalBytesWritten = 0L

            // Read and convert the audio data
            while (true) {
                val inputBufferIndex = mediaCodec.dequeueInputBuffer(10000)
                if (inputBufferIndex >= 0) {
                    val inputBuffer = mediaCodec.getInputBuffer(inputBufferIndex)!!
                    val bytesRead = mediaExtractor.readSampleData(inputBuffer, 0)

                    if (bytesRead >= 0) {
                        val presentationTimeUs = mediaExtractor.sampleTime
                        mediaCodec.queueInputBuffer(
                            inputBufferIndex,
                            0,
                            bytesRead,
                            presentationTimeUs,
                            0
                        )
                        mediaExtractor.advance()
                    } else {
                        mediaCodec.queueInputBuffer(
                            inputBufferIndex,
                            0,
                            0,
                            0,
                            MediaCodec.BUFFER_FLAG_END_OF_STREAM
                        )
                    }
                }

                val bufferInfo = MediaCodec.BufferInfo()
                val outputBufferIndex = mediaCodec.dequeueOutputBuffer(bufferInfo, 10000)
                if (outputBufferIndex >= 0) {
                    val outputBuffer = mediaCodec.getOutputBuffer(outputBufferIndex)!!

                    // Convert the ByteBuffer to a byte array
                    val audioDataSize = bufferInfo.size
                    val bytes = ByteArray(audioDataSize)
                    outputBuffer.get(bytes)

                    // Write the audio data to the WAV file
                    outputStream.write(bytes)

                    totalBytesWritten += audioDataSize

                    mediaCodec.releaseOutputBuffer(outputBufferIndex, false)

                    if ((bufferInfo.flags and MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {
                        break
                    }
                }
            }

            // Write the WAV header with the correct audio data size
            writeWavHeader(outputStream, totalBytesWritten, sampleRate, channelCount, AudioFormat.ENCODING_PCM_16BIT)

            mediaCodec.stop()
            mediaCodec.release()
            mediaExtractor.release()
            outputStream.close()

            return true
        } catch (e: IOException) {
            e.printStackTrace()
        }

        return false
    }

    // ...
    
    
    
    
    
    
    
    fun writeWavHeader(
    outputStream: DataOutputStream,
    audioDataSizePlaceholder: Long,
    sampleRate: Int,
    channelCount: Int,
    audioEncoding: Int
) {
    val totalDataSize = audioDataSizePlaceholder + 36
    val byteRate = sampleRate * channelCount * (audioEncoding / 8)

    outputStream.apply {
        // ChunkID (RIFF header)
        writeBytes("RIFF")

        // ChunkSize (RIFF header)
        writeInt(totalDataSize.toInt())

        // Format (RIFF header)
        writeBytes("WAVE")

        // Subchunk1ID (fmt subchunk)
        writeBytes("fmt ")

        // Subchunk1Size (fmt subchunk)
        writeInt(16)

        // AudioFormat (fmt subchunk)
        writeShort(1)  // PCM = 1

        // NumChannels (fmt subchunk)
        writeShort(channelCount.toShort())

        // SampleRate (fmt subchunk)
        writeInt(sampleRate)

        // ByteRate (fmt subchunk)
        writeInt(byteRate)

        // BlockAlign (fmt subchunk)
        writeShort((channelCount * (audioEncoding / 8)).toShort())

        // BitsPerSample (fmt subchunk)
        writeShort(audioEncoding.toShort())

        // Subchunk2ID (data subchunk)
        writeBytes("data")

        // Subchunk2Size (data subchunk) - Placeholder value
        writeInt(audioDataSizePlaceholder.toInt())
    }
}



val outputStream = DataOutputStream(FileOutputStream(wavFile))

// Placeholder for audio data size in the WAV header
val audioDataSizePlaceholder: Long = 0

// Write the WAV header with the placeholder audio data size
writeWavHeader(outputStream, audioDataSizePlaceholder, sampleRate, channelCount, audioEncoding)

// Write the audio data to the output file
outputStream.write(audioData)

// Get the actual audio data size
val audioDataSize = outputStream.size() - 44

// Move back to the position where the audio data size should be updated in the WAV header
outputStream.seek(40)
outputStream.writeInt(audioDataSize.toInt())

// Close the output stream
outputStream.close()



}

import java.io.*

fun convertToWav(inputFilePath: String, outputFilePath: String, sampleRate: Int, channels: Int, bitsPerSample: Int) {
    try {
        // 读取输入的音频样本数据文件
        val inputFile = File(inputFilePath)
        val inputStream = DataInputStream(FileInputStream(inputFile))
        val audioData = ByteArray(inputFile.length().toInt())
        inputStream.readFully(audioData)
        inputStream.close()

        // 创建输出的 WAV 文件
        val outputFile = File(outputFilePath)
        val outputStream = DataOutputStream(FileOutputStream(outputFile))

        // 写入 WAV 文件头
        val totalAudioLen = audioData.size.toLong()
        val totalDataLen = totalAudioLen + 36
        val byteRate = (sampleRate * channels * (bitsPerSample / 8)).toLong()

        // 写入文件标志 "RIFF"
        outputStream.writeBytes("RIFF")
        // 写入总大小
        outputStream.write(intToByteArray(totalDataLen.toInt()), 0, 4)
        // 写入文件类型 "WAVE"
        outputStream.writeBytes("WAVE")
        // 写入格式块标志 "fmt "
        outputStream.writeBytes("fmt ")
        // 写入格式块大小
        outputStream.write(intToByteArray(16), 0, 4)
        // 写入音频格式（PCM）
        outputStream.write(shortToByteArray(1), 0, 2)
        // 写入通道数
        outputStream.write(shortToByteArray(channels), 0, 2)
        // 写入采样率
        outputStream.write(intToByteArray(sampleRate), 0, 4)
        // 写入字节率
        outputStream.write(intToByteArray(byteRate.toInt()), 0, 4)
        // 写入块对齐
        outputStream.write(shortToByteArray((channels * (bitsPerSample / 8))).toInt(), 0, 2)
        // 写入位深度
        outputStream.write(shortToByteArray(bitsPerSample), 0, 2)
        // 写入数据块标志 "data"
        outputStream.writeBytes("data")
        // 写入音频数据大小
        outputStream.write(intToByteArray(totalAudioLen.toInt()), 0, 4)
        // 写入音频数据
        outputStream.write(audioData)

        outputStream.close()
        println("转换完成！WAV 文件已保存为：$outputFilePath")
    } catch (e: IOException) {
        e.printStackTrace()
    }
}

fun intToByteArray(value: Int): ByteArray {
    return byteArrayOf(
        (value and 0xFF).toByte(),
        (value shr 8 and 0xFF).toByte(),
        (value shr 16 and 0xFF).toByte(),
        (value shr 24 and 0xFF).toByte()
    )
}

fun shortToByteArray(value: Int): ByteArray {
    return byteArrayOf((value and 0xFF).toByte(), (value shr 8 and 0xFF).toByte())
}

// 使用示例
fun main() {
    val inputFilePath = "path/to/inputfile.dat"
    val outputFilePath = "path/to/outputfile.wav"
    val sampleRate = 44100 // 采样率
    val channels = 2 // 声道数
    val bitsPerSample = 16 // 位深度

    convertToWav(inputFilePath, outputFilePath, sampleRate, channels, bitsPerSample)
}


import android.media.MediaExtractor
import android.media.MediaFormat
import java.io.*

fun extractAudioFromMp4(inputFilePath: String, outputFilePath: String) {
    try {
        // 创建 MediaExtractor 对象，并设置输入文件路径
        val extractor = MediaExtractor()
        extractor.setDataSource(inputFilePath)

        // 查找音频轨道
        var audioTrackIndex = -1
        for (i in 0 until extractor.trackCount) {
            val format = extractor.getTrackFormat(i)
            val mime = format.getString(MediaFormat.KEY_MIME)
            if (mime?.startsWith("audio/") == true) {
                audioTrackIndex = i
                break
            }
        }

        if (audioTrackIndex == -1) {
            println("未找到音频轨道")
            return
        }

        // 选择音频轨道
        extractor.selectTrack(audioTrackIndex)

        // 获取音频格式
        val format = extractor.getTrackFormat(audioTrackIndex)
        val sampleRate = format.getInteger(MediaFormat.KEY_SAMPLE_RATE)
        val channelCount = format.getInteger(MediaFormat.KEY_CHANNEL_COUNT)
        val bitsPerSample = 16 // 位深度为 16

        // 创建输出文件
        val outputFile = File(outputFilePath)
        val outputStream = DataOutputStream(FileOutputStream(outputFile))

        // 读取并写入音频数据
        val bufferSize = 2 * sampleRate * channelCount
        val buffer = ByteArray(bufferSize)
        while (true) {
            val readSize = extractor.readSampleData(buffer, 0)
            if (readSize < 0) {
                break
            }

            outputStream.write(buffer, 0, readSize)
            extractor.advance()
        }

        // 关闭输入输出流
        extractor.release()
        outputStream.close()

        println("音频数据已保存为 PCM 格式数据：$outputFilePath")
    } catch (e: IOException) {
        e.printStackTrace()
    }
}

// 使用示例
fun main() {
    val inputFilePath = "path/to/inputfile.mp4"
    val outputFilePath = "path/to/outputfile.pcm"

    extractAudioFromMp4(inputFilePath, outputFilePath)
}
