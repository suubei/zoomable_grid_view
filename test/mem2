import android.media.MediaCodec
import android.media.MediaCodecInfo
import android.media.MediaExtractor
import android.media.MediaFormat
import android.media.AudioFormat
import android.media.AudioRecord
import android.media.AudioTrack
import android.media.AudioAttributes
import android.media.AudioManager
import java.io.*

class AudioConverter {

    fun convertAACtoWAV(aacFilePath: String, wavFilePath: String) {
        val aacFile = File(aacFilePath)
        val wavFile = File(wavFilePath)

        try {
            val mediaExtractor = MediaExtractor()
            mediaExtractor.setDataSource(aacFile.path)

            val audioTrackIndex = selectAudioTrack(mediaExtractor)

            mediaExtractor.selectTrack(audioTrackIndex)
            val mediaFormat = mediaExtractor.getTrackFormat(audioTrackIndex)

            val aacMimeType = mediaFormat.getString(MediaFormat.KEY_MIME)
            val channelCount = mediaFormat.getInteger(MediaFormat.KEY_CHANNEL_COUNT)
            val sampleRate = mediaFormat.getInteger(MediaFormat.KEY_SAMPLE_RATE)

            val mediaCodec = MediaCodec.createDecoderByType(aacMimeType)
            mediaCodec.configure(mediaFormat, null, null, 0)
            mediaCodec.start()

            val bufferSize = AudioRecord.getMinBufferSize(sampleRate, AudioFormat.CHANNEL_OUT_STEREO, AudioFormat.ENCODING_PCM_16BIT)
            val audioData = ByteArray(bufferSize)

            val outputStream = DataOutputStream(FileOutputStream(wavFile))
            writeWavHeader(outputStream, 0, sampleRate, channelCount, AudioFormat.ENCODING_PCM_16BIT)

            var presentationTimeUs = 0L
            var bytesRead = 0

            while (bytesRead != -1) {
                val bufferInfo = MediaCodec.BufferInfo()
                val inputBufferIndex = mediaCodec.dequeueInputBuffer(10000)
                if (inputBufferIndex >= 0) {
                    val inputBuffer = mediaCodec.getInputBuffer(inputBufferIndex)!!
                    bytesRead = mediaExtractor.readSampleData(inputBuffer, 0)
                    if (bytesRead >= 0) {
                        presentationTimeUs = mediaExtractor.sampleTime
                        mediaCodec.queueInputBuffer(
                            inputBufferIndex,
                            0,
                            bytesRead,
                            presentationTimeUs,
                            if (bytesRead < 0) MediaCodec.BUFFER_FLAG_END_OF_STREAM else 0
                        )
                        mediaExtractor.advance()
                    } else {
                        mediaCodec.queueInputBuffer(
                            inputBufferIndex,
                            0,
                            0,
                            0,
                            MediaCodec.BUFFER_FLAG_END_OF_STREAM
                        )
                    }
                }

                val outputBufferIndex = mediaCodec.dequeueOutputBuffer(bufferInfo, 10000)
                if (outputBufferIndex >= 0) {
                    val outputBuffer = mediaCodec.getOutputBuffer(outputBufferIndex)!!
                    outputBuffer.get(audioData)
                    outputBuffer.position(bufferInfo.offset)
                    outputBuffer.limit(bufferInfo.offset + bufferInfo.size)

                    outputStream.write(audioData, 0, bufferInfo.size)

                    mediaCodec.releaseOutputBuffer(outputBufferIndex, false)

                    if ((bufferInfo.flags and MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {
                        break
                    }
                }
            }

            mediaCodec.stop()
            mediaCodec.release()
            mediaExtractor.release()
            outputStream.close()
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    private fun selectAudioTrack(mediaExtractor: MediaExtractor): Int {
        val trackCount = mediaExtractor.trackCount
        for (i in 0 until trackCount) {
            val mediaFormat = mediaExtractor.getTrackFormat(i)
            val mime = mediaFormat.getString(MediaFormat.KEY_MIME)
            if (mime != null && mime.startsWith("audio/")) {
                return i
            }
        }
        return -1
    }

    private fun writeWavHeader(outputStream: DataOutputStream, audioDataSize: Long, sampleRate: Int,
                               channelCount: Int, audioFormat: Int) {
        val totalAudioLen = audioDataSize + 36
        val byteRate = sampleRate * channelCount * (AudioFormat.getBytesPerSample(audioFormat)).toLong()

        // Write WAV header
        outputStream.writeBytes("RIFF")
        outputStream.write(intToByteArray(totalAudioLen.toInt()), 0, 4)
        outputStream.writeBytes("WAVE")
        outputStream.writeBytes("fmt ")
        outputStream.write(intToByteArray(16), 0, 4)  // Sub-chunk 1 size (16 for PCM)
        outputStream.write(shortToByteArray(1), 0, 2)  // Audio format (1 for PCM)
        outputStream.write(shortToByteArray(channelCount.toShort()), 0, 2)  // Number of channels
        outputStream.write(intToByteArray(sampleRate), 0, 4)  // Sample rate
        outputStream.write(intToByteArray(byteRate.toInt()), 0, 4)  // Byte rate
        outputStream.write(shortToByteArray((channelCount * 16 / 8).toShort()), 0, 2)  // Block align
        outputStream.write(shortToByteArray(16), 0, 2)  // Bits per sample
        outputStream.writeBytes("data")
        outputStream.write(intToByteArray(audioDataSize.toInt()), 0, 4)  // Sub-chunk 2 size
    }

    private fun intToByteArray(value: Int): ByteArray {
        val byteArray = ByteArray(4)
        byteArray[0] = (value and 0xFF).toByte()
        byteArray[1] = (value shr 8 and 0xFF).toByte()
        byteArray[2] = (value shr 16 and 0xFF).toByte()
        byteArray[3] = (value shr 24 and 0xFF).toByte()
        return byteArray
    }

    private fun shortToByteArray(value: Short): ByteArray {
        val byteArray = ByteArray(2)
        byteArray[0] = (value and 0xFF).toByte()
        byteArray[1] = (value.toInt() shr 8 and 0xFF).toByte()
        return byteArray
    }
}

// Example usage
fun main() {
    val audioConverter = AudioConverter()
    val aacFilePath = "/path/to/input/audio.aac"
    val wavFilePath = "/path/to/output/audio.wav"
    audioConverter.convertAACtoWAV(aacFilePath, wavFilePath)
}
