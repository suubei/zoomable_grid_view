import AVFoundation

func extractAudioFromVideo(inputPath: String, outputPath: String) -> Bool {
    let inputURL = URL(fileURLWithPath: inputPath)
    let outputURL = URL(fileURLWithPath: outputPath)

    // Create the AVAsset from the input video file
    let asset = AVAsset(url: inputURL)

    // Create an AVAssetReader to read the audio track
    guard let audioTrack = asset.tracks(withMediaType: .audio).first else {
        print("No audio track found")
        return false
    }

    let outputSettings: [String: Any] = [
        AVFormatIDKey: kAudioFormatLinearPCM,
        AVLinearPCMIsFloatKey: false,
        AVLinearPCMIsBigEndianKey: false,
        AVLinearPCMBitDepthKey: 16,
        AVSampleRateKey: 44100,
        AVNumberOfChannelsKey: 2
    ]

    let readerOutput = AVAssetReaderTrackOutput(track: audioTrack, outputSettings: nil)
    let reader = try! AVAssetReader(asset: asset)
    reader.add(readerOutput)

    // Create an AVAssetWriter to write the audio track in PCM format
    let writerInput = AVAssetWriterInput(mediaType: .audio, outputSettings: outputSettings)
    let writer = try! AVAssetWriter(outputURL: outputURL, fileType: .caf)
    writer.add(writerInput)

    // Start reading and writing the audio track
    reader.startReading()
    writer.startWriting()
    writer.startSession(atSourceTime: .zero)

    let writeSemaphore = DispatchSemaphore(value: 0)
    writerInput.requestMediaDataWhenReady(on: DispatchQueue.global()) {
        while writerInput.isReadyForMoreMediaData {
            guard let sampleBuffer = readerOutput.copyNextSampleBuffer() else {
                writerInput.markAsFinished()
                writer.finishWriting(completionHandler: {
                    writeSemaphore.signal()
                })
                break
            }
            writerInput.append(sampleBuffer)
        }
    }

    _ = writeSemaphore.wait(timeout: .distantFuture)

    return writer.status == .completed
}

// Usage example
let inputPath = "/path/to/input/video.mp4"
let outputPath = "/path/to/output/audio.pcm"

if extractAudioFromVideo(inputPath: inputPath, outputPath: outputPath) {
    print("Audio extraction completed")
} else {
    print("Audio extraction failed")
}


import AVFoundation

func convertPCMtoWAV(inputPath: String, outputPath: String) -> Bool {
    let inputURL = URL(fileURLWithPath: inputPath)
    let outputURL = URL(fileURLWithPath: outputPath)

    // Set up the input audio file
    guard let inputFile = try? AVAudioFile(forReading: inputURL) else {
        print("Failed to open input audio file")
        return false
    }

    // Set up the output audio file
    let outputSettings: [String: Any] = [
        AVFormatIDKey: kAudioFormatLinearPCM,
        AVLinearPCMIsFloatKey: false,
        AVLinearPCMIsBigEndianKey: false,
        AVLinearPCMBitDepthKey: 16,
        AVSampleRateKey: inputFile.fileFormat.sampleRate,
        AVNumberOfChannelsKey: inputFile.fileFormat.channelCount
    ]

    guard let outputFile = try? AVAudioFile(forWriting: outputURL, settings: outputSettings, commonFormat: .pcmFormatInt16, interleaved: false) else {
        print("Failed to create output audio file")
        return false
    }

    // Initialize the buffer for audio conversion
    guard let buffer = AVAudioPCMBuffer(pcmFormat: inputFile.processingFormat, frameCapacity: AVAudioFrameCount(inputFile.length)) else {
        print("Failed to create audio buffer")
        return false
    }

    // Read the audio data from the input file
    do {
        try inputFile.read(into: buffer)
    } catch {
        print("Failed to read from input audio file: \(error)")
        return false
    }

    // Write the audio data to the output file
    do {
        try outputFile.write(from: buffer)
    } catch {
        print("Failed to write to output audio file: \(error)")
        return false
    }

    return true
}

// Usage example
let inputPath = "/path/to/input/audio.pcm"
let outputPath = "/path/to/output/audio.wav"

if convertPCMtoWAV(inputPath: inputPath, outputPath: outputPath) {
    print("PCM to WAV conversion completed")
} else {
    print("PCM to WAV conversion failed")
}

