import AVFoundation

func decodeAACtoPCM(inputPath: String, outputPath: String) -> Bool {
    let inputURL = URL(fileURLWithPath: inputPath)
    let outputURL = URL(fileURLWithPath: outputPath)

    let asset = AVAsset(url: inputURL)
    let audioAssetTrack = asset.tracks(withMediaType: .audio).first

    guard let track = audioAssetTrack else {
        print("Failed to extract audio track")
        return false
    }

    do {
        let outputSettings: [String: Any] = [
            AVFormatIDKey: kAudioFormatLinearPCM,
            AVLinearPCMIsBigEndianKey: false,
            AVLinearPCMIsFloatKey: false,
            AVLinearPCMBitDepthKey: 16
        ]

        let converter = try AVAudioConverter(from: track.formatDescriptions.first as! CMAudioFormatDescription, to: outputSettings)
        
        let outputFile = try AVAudioFile(forWriting: outputURL, settings: converter.outputFormat.sampleRate)

        let outputBuffer = AVAudioPCMBuffer(pcmFormat: converter.outputFormat, frameCapacity: AVAudioFrameCount(converter.outputFormat.sampleRate))
        
        try outputFile.write(from: outputBuffer)

        let inputFile = try AVAudioFile(forReading: inputURL)
        
        while let buffer = AVAudioPCMBuffer(pcmFormat: inputFile.processingFormat, frameCapacity: AVAudioFrameCount(inputFile.processingFormat.sampleRate)) {
            try inputFile.read(into: buffer)
            
            let inputCallback: AVAudioConverterInputBlock = { inNumPackets, outStatus in
                outStatus.pointee = AVAudioConverterInputStatus.haveData
                return buffer
            }
            
            var outputPacketCount = AVAudioPacketCount(buffer.frameCapacity)
            let status = converter.convert(to: outputBuffer, error: nil, withInputFrom: inputCallback, inputFrameCount: buffer.frameLength, outputPacketCount: &outputPacketCount)
            
            if status != .haveData && status != .inputRanDry {
                break
            }
            
            try outputFile.write(from: outputBuffer)
        }
        
        return true
    } catch {
        print("Error during AAC to PCM conversion: \(error)")
        return false
    }
}

// Usage example
let inputPath = "/path/to/input/video.mp4"
let outputPath = "/path/to/output/audio.pcm"

let success = decodeAACtoPCM(inputPath: inputPath, outputPath: outputPath)
if success {
    print("AAC to PCM conversion successful")
} else {
    print("AAC to PCM conversion failed")
}
