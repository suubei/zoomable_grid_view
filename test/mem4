import AVFoundation

func decodeAACtoPCM(inputPath: String, outputPath: String) -> Bool {
    let inputURL = URL(fileURLWithPath: inputPath)
    let outputURL = URL(fileURLWithPath: outputPath)
    
    let inputFile = try! AVAudioFile(forReading: inputURL)
    let outputFile = try! AVAudioFile(forWriting: outputURL, settings: inputFile.fileFormat.settings)

    // Set up the input and output formats
    let inputFormat = inputFile.fileFormat
    guard let outputFormat = AVAudioFormat(commonFormat: .pcmFormatInt16, sampleRate: inputFormat.sampleRate, channels: 1, interleaved: true) else {
        print("Failed to create output format")
        return false
    }

    // Create the audio converter
    let converter = AVAudioConverter(from: inputFormat, to: outputFormat)!

    // Set up the buffer for reading the input file
    let inputBuffer = AVAudioPCMBuffer(pcmFormat: inputFormat, frameCapacity: AVAudioFrameCount(inputFile.length))!
    try! inputFile.read(into: inputBuffer)

    // Set up the buffer for writing the output file
    let outputBuffer = AVAudioPCMBuffer(pcmFormat: outputFormat, frameCapacity: inputBuffer.frameCapacity)!

    // Perform the conversion
    var error: NSError? = nil
    let inputCallback: AVAudioConverterInputBlock = { inNumPackets, outStatus in
        outStatus.pointee = AVAudioConverterInputStatus.haveData
        return inputBuffer
    }

    converter.convert(to: outputBuffer, error: &error, withInputFrom: inputCallback)

    // Write the output buffer to the output file
    try! outputFile.write(from: outputBuffer)

    return true
}

// Usage example
let inputPath = "path/to/inputfile.aac"
let outputPath = "path/to/outputfile.pcm"

if decodeAACtoPCM(inputPath: inputPath, outputPath: outputPath) {
    print("AAC to PCM conversion succeeded")
} else {
    print("AAC to PCM conversion failed")
}
