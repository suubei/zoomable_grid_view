import android.media.AudioFormat
import android.media.AudioRecord
import android.media.MediaRecorder
import android.media.AudioTrack
import android.media.AudioAttributes
import android.media.AudioManager
import java.io.*

class AudioConverter {

    fun convertRawToWav(rawFilePath: String, wavFilePath: String) {
        val sampleRateInHz = 44100
        val channelConfig = AudioFormat.CHANNEL_IN_MONO
        val audioFormat = AudioFormat.ENCODING_PCM_16BIT
        val bufferSize = AudioRecord.getMinBufferSize(sampleRateInHz, channelConfig, audioFormat)

        val rawFile = File(rawFilePath)
        val wavFile = File(wavFilePath)

        try {
            val outputStream = DataOutputStream(FileOutputStream(wavFile))
            writeWavHeader(outputStream, rawFile.length(), sampleRateInHz, channelConfig, audioFormat)

            val inputStream = DataInputStream(FileInputStream(rawFile))
            val audioData = ByteArray(bufferSize)

            while (inputStream.available() > 0) {
                val bytesRead = inputStream.read(audioData)
                outputStream.write(audioData, 0, bytesRead)
            }

            inputStream.close()
            outputStream.close()
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    private fun writeWavHeader(outputStream: DataOutputStream, audioDataSize: Long, sampleRateInHz: Int,
                               channelConfig: Int, audioFormat: Int) {
        val totalAudioLen = audioDataSize + 36
        val byteRate = sampleRateInHz * channelConfig * (AudioFormat.getBytesPerSample(audioFormat)).toLong()

        // Write WAV header
        outputStream.writeBytes("RIFF")
        outputStream.write(intToByteArray(totalAudioLen.toInt()), 0, 4)
        outputStream.writeBytes("WAVE")
        outputStream.writeBytes("fmt ")
        outputStream.write(intToByteArray(16), 0, 4)  // Sub-chunk 1 size (16 for PCM)
        outputStream.write(shortToByteArray(1), 0, 2)  // Audio format (1 for PCM)
        outputStream.write(shortToByteArray(channelConfig.toShort()), 0, 2)  // Number of channels
        outputStream.write(intToByteArray(sampleRateInHz), 0, 4)  // Sample rate
        outputStream.write(intToByteArray(byteRate.toInt()), 0, 4)  // Byte rate
        outputStream.write(shortToByteArray((channelConfig * 16 / 8).toShort()), 0, 2)  // Block align
        outputStream.write(shortToByteArray(16), 0, 2)  // Bits per sample
        outputStream.writeBytes("data")
        outputStream.write(intToByteArray(audioDataSize.toInt()), 0, 4)  // Sub-chunk 2 size
    }

    private fun intToByteArray(value: Int): ByteArray {
        val byteArray = ByteArray(4)
        byteArray[0] = (value and 0xFF).toByte()
        byteArray[1] = (value shr 8 and 0xFF).toByte()
        byteArray[2] = (value shr 16 and 0xFF).toByte()
        byteArray[3] = (value shr 24 and 0xFF).toByte()
        return byteArray
    }

    private fun shortToByteArray(value: Short): ByteArray {
        val byteArray = ByteArray(2)
        byteArray[0] = (value and 0xFF).toByte()
        byteArray[1] = (value.toInt() shr 8 and 0xFF).toByte()
        return byteArray
    }
}

// Example usage
fun main() {
    val audioConverter = AudioConverter()
    val rawFilePath = "/path/to/input/audio.raw"
    val wavFilePath = "/path/to/output/audio.wav"
    audioConverter.convertRawToWav(rawFilePath, wavFilePath)
}
