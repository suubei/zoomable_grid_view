import AVFoundation

func getAudioMimeType(fromVideoURL videoURL: URL) -> String? {
    let asset = AVAsset(url: videoURL)
    
    // Check if the asset has any audio tracks
    guard let audioTrack = asset.tracks(withMediaType: .audio).first else {
        return nil
    }
    
    let audioFormatDescriptions = audioTrack.formatDescriptions as! [CMAudioFormatDescription]
    guard let audioFormatDescription = audioFormatDescriptions.first else {
        return nil
    }
    
    let audioCodec = CMFormatDescriptionGetMediaSubType(audioFormatDescription)
    let audioMimeType = UTTypeCopyPreferredTagWithClass(audioCodec, kUTTagClassMIMEType)?.takeRetainedValue() as String?
    
    return audioMimeType
}

func convertMimeTypeToAVFileType(mimeType: String) -> AVFileType? {
    guard let uti = UTTypeCreatePreferredIdentifierForTag(kUTTagClassMIMEType, mimeType as CFString, nil)?.takeRetainedValue() else {
        return nil
    }
    
    return AVFileType(uti: uti)
}

// Usage example
let videoURL = URL(fileURLWithPath: "/path/to/video.mov")
if let audioMimeType = getAudioMimeType(fromVideoURL: videoURL) {
    if let avFileType = convertMimeTypeToAVFileType(mimeType: audioMimeType) {
        print("Audio MIME Type: \(audioMimeType)")
        print("AVFileType: \(avFileType)")
    } else {
        print("Failed to convert MIME type to AVFileType")
    }
} else {
    print("Video has no audio track")
}
