import AVFoundation

func convertM4AToWAV(inputURL: URL, outputURL: URL) {
    let asset = AVURLAsset(url: inputURL)
    let audioAsset = asset.tracks(withMediaType: AVMediaType.audio).first!

    let outputSettings: [String: Any] = [
        AVFormatIDKey: kAudioFormatLinearPCM,
        AVLinearPCMIsBigEndianKey: false,
        AVLinearPCMIsFloatKey: false,
        AVLinearPCMBitDepthKey: 16,
        AVLinearPCMIsNonInterleaved: false
    ]

    let outputFileType = AVFileType.wav

    let audioConverter = try! AVAudioConverter(from: audioAsset.formatDescription, to: outputSettings)
    let convertedFile = try! AVAudioFile(forWriting: outputURL, settings: audioConverter.outputFormat)

    let packetSize = 4096
    let buffer = AVAudioPCMBuffer(pcmFormat: audioConverter.outputFormat, frameCapacity: AVAudioFrameCount(packetSize))!

    var totalFrames: AVAudioFramePosition = 0
    var error: NSError? = nil

    while true {
        let inputStatus = audioConverter.convert(to: buffer, error: &error)

        if inputStatus == .endOfStream {
            break
        }

        if inputStatus == .haveData {
            let outputStatus = convertedFile.write(from: buffer)

            if outputStatus != .success {
                print("Error writing buffer to file: \(outputStatus)")
                break
            }

            totalFrames += buffer.frameLength
        }

        if inputStatus != .haveData {
            print("Error converting input: \(inputStatus)")
            break
        }
    }

    convertedFile.framePosition = 0
    convertedFile.length = totalFrames

    print("Conversion complete")
}

// Usage example
let inputURL = URL(fileURLWithPath: "input.m4a")
let outputURL = URL(fileURLWithPath: "output.wav")

convertM4AToWAV(inputURL: inputURL, outputURL: outputURL)
